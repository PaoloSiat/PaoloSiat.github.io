{"version":3,"sources":["components/aboutMe.tsx","components/contact.tsx","utility/utility.ts","components/footer.tsx","components/header.tsx","components/navigationBar.tsx","components/portfolio.tsx","components/workExperience.tsx","index.tsx"],"names":["AboutMe","props","state","aboutMeText","fetch","then","data","text","setState","console","log","id","className","this","Component","Contact","status","submitForm","bind","event","preventDefault","form","target","FormData","xhr","XMLHttpRequest","open","method","action","setRequestHeader","onreadystatechange","readyState","DONE","reset","send","href","rel","onSubmit","title","type","name","tabIndex","value","scrollToContentChild","childElementName","contentElement","document","getElementById","childElement","y","getBoundingClientRect","top","navigationBarElement","navigationBarHeight","height","scrollBy","left","Math","round","behavior","Footer","onClick","x","scrollTo","scrollToContentLocation","Header","NavigationBar","window","addEventListener","onResize","navigationElement","body","width","style","display","toggleVerticalNavigation","Portfolio","portfolioData","JSON","parse","categories","category","result","images","categoryData","image","path","push","Image","key","src","alt","fluid","draggable","element","visible","forceUpdate","getImagesFromCategory","WorkExperience","content","file","a","trim","response","loadFile","workExperienceContent","toggleWorkExperience","ReactDOM","render","basename","process"],"mappings":"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","file":"static/js/main.e3dfe294.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n// The data that the Portfolio class manages.\r\ninterface AboutMeProps {}\r\ninterface AboutMeState {\r\n  aboutMeText: string;\r\n}\r\n\r\n// Rendering is done in HTML and returns what this class what actually look like on the screen.\r\nexport default class AboutMe extends Component<AboutMeProps, AboutMeState> {\r\n  constructor (props: AboutMeProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      aboutMeText: ''\r\n    }\r\n\r\n    // Grab the text content of the file and parse it in to a class variable.\r\n    fetch('aboutMe.txt')\r\n    .then(data => data.text())\r\n    .then(text => { this.setState({ aboutMeText: text }, () => console.log(this.state.aboutMeText)) });\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <div id='about-me'>\r\n        <h1 className='unselectable'>ABOUT ME</h1>\r\n        <p>{this.state.aboutMeText}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\n\r\n// The data that the Contact class manages.\r\ninterface ContactProps {}\r\ninterface ContactState {\r\n  status: string;\r\n}\r\n\r\nexport default class Contact extends Component<ContactProps, ContactState> {\r\n  // This function runs when the class is created.\r\n  constructor(props: ContactProps) {\r\n    super(props);\r\n\r\n    // Set default data.\r\n    this.state = {\r\n      status: ''\r\n    };\r\n\r\n    // Bind the submit form event to the submit form function.\r\n    this.submitForm = this.submitForm.bind(this);\r\n  }\r\n\r\n  submitForm(event: any): void {\r\n    // Process and send the data submitted to the website that sends the email.\r\n    event.preventDefault();\r\n    const form = event.target;\r\n    const data = new FormData(form);\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(form.method, form.action);\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    xhr.onreadystatechange = () => {\r\n      if (xhr.readyState !== XMLHttpRequest.DONE) return;\r\n      if (xhr.status === 200) {\r\n        form.reset();\r\n        this.setState({ status: \"SUCCESS\" });\r\n      } else {\r\n        this.setState({ status: \"ERROR\" });\r\n      }\r\n    };\r\n    xhr.send(data);\r\n  }\r\n\r\n  // Rendering is done in HTML and returns what this class what actually look like on the screen.\r\n  render(): JSX.Element {\r\n    return (\r\n      <div id='contact'>\r\n        <div id='contact-information'>\r\n          <h1>CONTACT INFORMATION</h1>\r\n          <p><strong>John Paolo Siat</strong><br />Multimedia Artist<br />\r\n            Phone: <span className='dark'>+64291269475</span><br />\r\n            E-mail: <span className='dark'>paolosiat@gmail.com</span></p>\r\n          <div id='social-media-icons'>\r\n            <a href='https://instagram.com/billygreatestwarriorever' className='fa-layers fa-2x'rel='noopener noreferrer' target='_blank'>\r\n\t\t\t\t\t\t\t<i className='fab fa-instagram'></i>\r\n\t\t\t\t\t\t</a>\r\n            <a href='https://www.youtube.com/channel/UCWuBcvSc01LjIofiTb97I2g' className='fa-layers fa-2x' rel='noopener noreferrer' target='_blank'>\r\n\t\t\t\t\t\t\t<i className=\"fab fa-youtube\"></i>\r\n\t\t\t\t\t\t</a>\r\n          </div>\r\n        </div>\r\n        <div id='contact-form'>\r\n          <h1 className='unselectable'>SEND ME A MESSAGE!</h1>\r\n          <form onSubmit={this.submitForm} action=\"https://formspree.io/mdowbkwd\" method=\"POST\">\r\n            <label>\r\n            <p className='unselectable'>Name:<abbr title='required' className='red'>* </abbr></p>\r\n              <input type='text' id='form-name' name='form-name' tabIndex={1} />\r\n            </label>\r\n            <label>\r\n              <p className='unselectable'>E-mail:<abbr title='required' className='red'>* </abbr></p>\r\n              <input type='email' id='form-email' name='form-email' tabIndex={2} />\r\n            </label>\r\n            <label>\r\n              <p className='unselectable'>Message:<abbr title='required' className='red'>* </abbr></p>\r\n              <textarea id='form-message' name='form-message' tabIndex={3} />\r\n            </label>\r\n            {this.state.status === \"SUCCESS\" ? <p className='dark'><strong>Thanks!</strong></p> : <input type='submit' id='form-submit' name='form-submit' value=\"Send\" tabIndex={4} />}\r\n            {this.state.status === \"ERROR\" && <p className='red'><strong>Ooops! There was an error.</strong></p>}\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// Scrolls the screen to the location specified\r\nexport const scrollToContentLocation = (x: number, y: number): void => {\r\n  let contentElement = document.getElementById('content');\r\n\r\n  if (contentElement) contentElement.scrollTo({ left: x, top: y, behavior: 'smooth' });\r\n}\r\n\r\n// Scrolls the screen to the location that a specific HTML element is at.\r\nexport const scrollToContentChild = (childElementName: string): void => {\r\n  let contentElement = document.getElementById('content');\r\n  let childElement = document.getElementById(childElementName);\r\n  let y = childElement ? childElement.getBoundingClientRect().top : 0;\r\n  let navigationBarElement = document.getElementById('navigation-bar');\r\n  let navigationBarHeight = navigationBarElement ? navigationBarElement.getBoundingClientRect().height : 0;\r\n\r\n  if (contentElement) contentElement.scrollBy({ left: 0, top: Math.round((y - navigationBarHeight)), behavior: 'smooth' });\r\n}\r\n","import React, { Component } from 'react';\r\nimport { scrollToContentLocation } from '../utility';\r\n\r\n\r\n// The data that the Contact class manages.\r\ninterface FooterProps {}\r\ninterface FooterState {}\r\n\r\nexport default class Footer extends Component<FooterProps, FooterState> {\r\n  // Rendering is done in HTML and returns what this class what actually look like on the screen.\r\n  render(): JSX.Element {\r\n    return (\r\n      <div id='footer' className='unselectable'>\r\n        <div>\r\n          <div>© 2020 Paolo Siat. All rights reserved</div>\r\n          <div id='back-to-top' onClick={() => scrollToContentLocation(0, 0)}>▲ Back to Top</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\n\r\n// The data that the Contact class manages.\r\ninterface HeaderProps {}\r\ninterface HeaderState {}\r\n\r\nexport default class Header extends Component<HeaderProps, HeaderState> {\r\n   // Rendering is done in HTML and returns what this class what actually look like on the screen.\r\n  render(): JSX.Element {\r\n    return (\r\n      <div id='header'>\r\n        <div id='header-name' className='unselectable'>\r\n          <h1>PAOLO SIAT</h1>\r\n          <h2>Multimedia Artist</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { scrollToContentChild } from '../utility';\r\n\r\n\r\n// The data that the Contact class manages.\r\ninterface NavigationBarProps {}\r\ninterface NavigationBarState {}\r\n\r\nexport default class NavigationBar extends Component<NavigationBarProps, NavigationBarState> {\r\n  // This function runs when the class is created.\r\n  constructor(props: NavigationBarProps) {\r\n    super(props);\r\n\r\n    // Bind the onResize function to the event that triggers every time the windows resizes.\r\n    window.addEventListener('resize', this.onResize);\r\n  }\r\n\r\n  onResize(): void {\r\n    // If the window is wider than 576 pixels then hide the vertical navigation menu.\r\n    let navigationElement = document.getElementById('navigation-vertical');\r\n\r\n    if (navigationElement && document.body.getBoundingClientRect().width >= 576) navigationElement.style.display = 'none';\r\n  }\r\n\r\n  toggleVerticalNavigation(): void {\r\n    // Toggle the visibility of the vertical navigation menu.\r\n    let navigationElement = document.getElementById('navigation-vertical');\r\n\r\n    if (navigationElement && navigationElement.style.display !== 'flex') navigationElement.style.display = 'flex';\r\n    else if (navigationElement) navigationElement.style.display = 'none';\r\n  }\r\n\r\n   // Rendering is done in HTML and returns what this class what actually look like on the screen.\r\n  render(): JSX.Element {\r\n    return (\r\n      <div id='navigation-bar' className='unselectable'>\r\n        <div id='navigation-toggle' onClick={() => this.toggleVerticalNavigation()}>≡</div>\r\n        <ul id='navigation-horizontal'>\r\n          <li onClick={() => scrollToContentChild('about-me')}>ABOUT ME</li>\r\n          <li onClick={() => scrollToContentChild('portfolio')}>PORTFOLIO</li>\r\n          <li onClick={() => scrollToContentChild('work-experience')}>WORK EXPERIENCE</li>\r\n          <li onClick={() => scrollToContentChild('contact')}>CONTACT</li>\r\n        </ul>\r\n        <ul id='navigation-vertical' style={{ display: 'none' }}>\r\n          <li onClick={() => scrollToContentChild('about-me')}>ABOUT ME</li>\r\n          <li onClick={() => scrollToContentChild('portfolio')}>PORTFOLIO</li>\r\n          <li onClick={() => scrollToContentChild('work-experience')}>WORK EXPERIENCE</li>\r\n          <li onClick={() => scrollToContentChild('contact')}>CONTACT</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Image } from 'semantic-ui-react';\r\n\r\n\r\n// What defines a category as being a category.\r\ninterface IPortfolioCategory {\r\n  name: string;\r\n  title: string;\r\n  visible: boolean;\r\n  images: string[];\r\n}\r\n\r\n// The data that the Portfolio class manages.\r\ninterface PortfolioProps {}\r\ninterface PortfolioState {\r\n  portfolioData: IPortfolioCategory[];\r\n}\r\n\r\nexport default class Portfolio extends Component<PortfolioProps, PortfolioState> {\r\n  // This function runs when the class is created.\r\n  constructor(props: PortfolioProps) {\r\n    super(props);\r\n\r\n    // Set default data.\r\n    this.state = {\r\n      portfolioData: []\r\n    }\r\n\r\n    // Grab the text content of the file and parse it in to a class variable.\r\n    fetch('portfolio.json')\r\n    .then(data => data.text())\r\n    .then(text => {\r\n      this.setState({ portfolioData: JSON.parse(text).categories })\r\n    });\r\n  }\r\n\r\n  // This function makes it possible to create a section of HTML code that is reusable and uses the category parameter to change content.\r\n  getImagesFromCategory(category: string): JSX.Element[] {\r\n    let result: JSX.Element[] = [];\r\n    let images: JSX.Element[] = [];\r\n\r\n    // Loop through loaded data and match the input category name and the \r\n    for (let categoryData of this.state.portfolioData) {\r\n      if (category === categoryData.name) {\r\n        // Loop through the images that are in the matched category to create and add them to the images list.\r\n        for (let image of categoryData.images) {\r\n          let path = `images/${categoryData.name}/${image}`;\r\n\r\n          // Create an image element using using the information from the data and bind a click event to it.\r\n          images.push(\r\n            <Image key={path} src={path} alt={path} className='portfolio-image' fluid={true} draggable={false} onClick={() => console.log('tried to open image')} />\r\n          );\r\n        }\r\n\r\n        result.push(<div key='selector' className='portfolio-selector'  onClick={() => {\r\n          let element = document.getElementById(`portfolio-content-${categoryData.name}`);\r\n\r\n          if (categoryData.visible && element) element.style.display = 'none';\r\n          else if (element) element.style.display = 'flex'; \r\n          categoryData.visible = !categoryData.visible\r\n\r\n          this.forceUpdate();\r\n        }}>\r\n          <h2>{categoryData.title}</h2>\r\n          <div>\r\n            {categoryData.visible ? '▲' : '▼'}\r\n          </div>\r\n        </div>);\r\n\r\n        // Wrap the images in a container element and add it to the result.\r\n        result.push(<div key='images' id={`portfolio-content-${categoryData.name}`} className='portfolio-content' style={{ display: 'none' }}>{images}</div >);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Rendering is done in HTML and returns what this class what actually look like on the screen.\r\n  render(): JSX.Element {\r\n    return (\r\n      <div id='portfolio' className='unselectable'>\r\n        <h1 className='unselectable'>WORKS</h1>\r\n        <div id='portfolio-graphic-design' className='portfolio-container'>\r\n          {this.getImagesFromCategory('graphic-design')}\r\n        </div>\r\n        <div id='portfolio-illustrations' className='portfolio-container'>\r\n          {this.getImagesFromCategory('illustrations')}\r\n        </div>\r\n        <div id='portfolio-traditional' className='portfolio-container'>\r\n          {this.getImagesFromCategory('traditional')}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Markdown from 'markdown-to-jsx';\r\n\r\n\r\n// The data that the Portfolio class manages.\r\ninterface WorkExperienceProps {}\r\ninterface WorkExperienceState {\r\n  visible: boolean;\r\n  content: string;\r\n}\r\n\r\n// Rendering is done in HTML and returns what this class what actually look like on the screen.\r\nexport default class WorkExperience extends Component<WorkExperienceProps, WorkExperienceState> {\r\n  // This function runs when the class is created.\r\n  constructor(props: WorkExperienceProps) {\r\n    super(props);\r\n\r\n    // Set default data.\r\n    this.state = {\r\n      visible: false,\r\n      content: ''\r\n    };\r\n  }\r\n\r\n  // This function runs when the class is added to the screen.\r\n  componentDidMount(): void {\r\n    // Define a function that loads content out of a file and returns the text.\r\n    let loadFile = async (file: string) => {\r\n      let response = await fetch(`/${file.trim()}`);\r\n      \r\n      return response.text();\r\n    }\r\n\r\n    // Load the file and set the content variable to contain that data.\r\n    loadFile('work-experience.md').then(data => {\r\n      this.setState({ content: data });\r\n    });\r\n  }\r\n\r\n  toggleWorkExperience(): void {\r\n    // Toggle visibility of the work experience content.\r\n    this.setState({ visible: !this.state.visible }, () => {\r\n      let workExperienceContent = document.getElementById('work-experience-content');\r\n\r\n      if (workExperienceContent && this.state.visible)\r\n      {\r\n        workExperienceContent.style.display = 'block';\r\n      }\r\n      else if (workExperienceContent)\r\n      {\r\n        workExperienceContent.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n\r\n  // Rendering is done in HTML and returns what this class what actually look like on the screen.\r\n  render(): JSX.Element {\r\n    return (\r\n      <div id='work-experience'>\r\n        <div id='work-experience-toggle' className='unselectable' onClick={() => this.toggleWorkExperience()}>\r\n          <h1>WORK EXPERIENCE</h1>\r\n          <div>{this.state.visible ? '▲' : '▼'}</div>\r\n        </div>\r\n        <div id='work-experience-content' style={{ display: 'none' }}>\r\n          <Markdown>{this.state.content}</Markdown>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { AboutMe, Contact, Footer, Header, NavigationBar, Portfolio, WorkExperience } from './components'\r\n\r\n// Import the contents of the css files.\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './css';\r\n\r\n// Whatever gets rendered here gets rendered on the screen.\r\nReactDOM.render(\r\n  <Router basename={process.env.PUBLIC_URL}>\r\n    <NavigationBar />\r\n    <div id='content'>\r\n      <Header />\r\n      <AboutMe />\r\n      <Portfolio />\r\n      <WorkExperience />\r\n      <Contact />\r\n      <Footer />\r\n    </div>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}